---------------------------------------------------
  Readme.txt

---------------------------------------------------

 Lab 2 - EEPROM and CRG

---------------------------------------------------

This project is designed for Lab 2.

It is set up for the MC9S12A512 ModCon board.

It relies on Lab 1 - the ModCon serial protocol framework should be in place.

Communications with a PC is via the USB cable, and uses COM6.

The connection method between CodeWarrior and the ModCon board
is via the USB Multilink. This enables you to 'burn' and debug
the ModCon board in situ.

//------------------------------------------------------------------------
//  Compiling for different targets
//------------------------------------------------------------------------

---------------------------------------------------
If you wish to compile/debug WITH a ModCon board:

1. Choose "ModCon" as the target.

2. Press F5 - your program will be loaded into the ModCon board.

---------------------------------------------------
If you wish to compile/debug WITHOUT a ModCon board:

1. Choose "Full Chip Simulation" as the target.

2. Temporarily disable polling of the RDRF flag - always try and get
   a byte from the serial port.

3. Press F5 - your program will be loaded into the simulator.

4. Set a breakpoint at the point in your program where the byte from
   the serial port is about to be loaded into the receive buffer.
   
5. In the "Data2" window, double-click on your variable which holds the
   byte received from the serial port - you can now type in a new value.

//------------------------------------------------------------------------
//  Getting Started
//------------------------------------------------------------------------

To build/debug your project, use the menu Project > Debug or press F5.

This will open the simulator/debugger.

Press again F5 in the debugger (or menu Run > Start/Continue) to start
the application. The menu Run > Halt or F6 stops the application.

In the debugger menu Component > Open you can load additional components.

//------------------------------------------------------------------------
// Project structure
//------------------------------------------------------------------------

The project generated contains various files/folders:
- readme.txt: this file
- Sources: folder with the application source code
- Startup Code: C startup code
- Prm:
   - burner.bbl file to generate S-Records
   - the linker .prm file
- Linker Map: the .map file generated by the linker
- Libraries: needed library files (ANSI, derivative header/implementation files)
- Debugger Project File: contains a .ini file for the debugger
- Debugger Cmd Files: contains a sub-folder for the Monitor with command files
